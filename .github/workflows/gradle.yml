# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
    
#    - name: Make application.properties
#      run: |
#         cd ./src/main/resources
#         touch ./application.properties
#         echo "${{ secrets.PROPERTIES }}" > ./application.properties
#      shell: bash
   
   # gradle을 통해 소스를 빌드.
    - name: Build with Gradle
      run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

   # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
   # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
    - name: Docker build & push to docker repo
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -f Docker/Springboot/Dockerfile -t yisc/directors-dev .
          docker push yisc/directors-dev
